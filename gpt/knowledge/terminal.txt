how to use the dagger shell

Your terminal is running the dagger shell. Regular bash commands will NOT work. See examples for what will.

## Concepts

- Everything is typed and documented. Use .doc anytime you're not sure how to achieve something. See examples below.
- Everything is immutable and contextual. Most functions have no side effects. Think "functional programming" with a bash-like syntax.

## Pipelines

Function calls can be chained to form a pipeline.
Each function returns a certain type. If that type is an object, it may contain more functions,
which can be called, and so on. Each function call has its own arguments.

This is similar to bash pipelines, except with typed artifacts flowing through the functions,
rather than unstructured text streams flowing through the bash commands.

## How to find available commands in the shell

- '.help' shows available builtins
- '.doc' prints documentation of the current object: type and available functions. Inserted in a pipeline, it applies to the object returned by the previous function.
- '.doc FOO' prints information about the function FOO: return type, arguments

Examples:

<shell>
.help
.doc
.doc container
container | .doc
container | from alpine
</shell>

Examples:

container | from index.docker.io/golang | with-directory /src $(.git https://github.com/goreleaser/goreleaser | head | tree) | with-workdir /src | with-exec go build ./... | directory ./bin
directory | with-new-file goreleaser-readme.md $(git https://github.com/goreleaser/goreleaser | tags | tree | file README.md | contents)

## Examples

.help
.doc
.doc container
directory | .doc
container | .doc
container | from alpine | with-exec apk add openssh git | .doc publish
container | from alpine | with-exec apk add openssh git | publish ttl.sh/my-image
directory | with-new-file goreleaser-readme.md $(git https://github.com/goreleaser/goreleaser | head | tree | file README.md)
directory | with-new-file goreleaser-readme.md $(git https://github.com/goreleaser/goreleaser | tags | tree | file README.md | contents)
http https://news.ycombinator.com | contents
directory | with-new-file hello.txt "hello world" | file hello.txt | .doc
directory | with-new-file hello.txt "hello world" | file hello.txt | contents
container | from index.docker.io/golang | with-directory /src $(.git https://github.com/goreleaser/goreleaser | head | tree) | with-workdir /src | with-exec go build ./... | directory ./bin
.doc github.com/dagger/dagger/modules/go
github.com/dagger/dagger/modules/go $(git https://github.com/goreleaser/goreleaser | head | tree) | .doc
.doc github.com/dagger/dagger/cmd/dagger
github.com/dagger/dagger/cmd/dagger | binary --platform=darwin/arm64
.doc github.com/cubzh/cubzh

# Load module directly from address:
github.com/cubzh/cubzh | .doc

# Load module directly from address, inspect its contents, then build a pipeline
github.com/shykes/x/termcast | .doc
github.com/shykes/x/termcast | exec 'ls -l' | exec 'curl https://lemonde.fr' | gif
git https://github.com/kpenfound/dagger-modules | head | tree | glob '**'

github.com/shykes/x | .deps
github.com/shykes/x | wolfi | .doc
github.com/shykes/x | python | .doc
github.com/shykes/x | svix | .doc
github.com/shykes/x | kafka | .doc

# Bash syntax means the usual quoting rules apply. Be careful to use single quotes when writing shell scripts to a file, or the env variables may be expanded by the dagger shell instead
foo=bar; directory | with-new-file joke.txt "two programmers meet in a $foo" | with-new-file script.sh 'echo "my user is $USER"'

# with-exec has args within args. use -- judiciously:
container | from alpine | with-exec ls -- -l

# most dockerfile commands have an equivalent, but not always named the same. explore!
container | .doc
container | with-default-args bash -- -l

# ephemeral services are great for containerizing test environments
container | from alpine | with-service-binding www $(container | from nginx | with-exposed-port 80) | with-exec curl www | stdout

## How to get useful errors in the shell

Sometimes the dagger shell produces errors that are not super useful. Here are some tips for managing that:

If the error comes from with-exec, and it just tells you the exit code without giving stderr:
you can get the actual stderr by running:

<YOUR PIPELINE> | with-exec YOUR COMMAND --expect=ANY | stderr

This will bypass dagger's default handling of non-zero exit codes: instead of aborting on non-zero,
with-exec will continue the pipeline and let you query standard error

## Argument syntax

The safest syntax for passing arguments is '--foo=bar'. For booleans you can use '--foo=true' or '--foo=false'. As a convenience '--foo' means '--foo=true'

## More examples

how to use the shell (examples).

These are commands for you to run. Don't tell the user how to run a command - do it yourself.

Annotations for the reader:
- "<topic>" groups the examples by a certain logical topic
- "<mistake>" indicates that this particular command is a mistake.
The mistakes are not part of the examples.
- "<replay>": in-order replay of a shell session with each command and its result, in sequence.

Each line is one example

<topic "core API">
.version
.help
.stdlib | .doc
.stdlib | container | .doc
.doc container
container | .doc
container | from index.docker.io/alpine | .doc
<mistake>container | from index.docker.io/alpine | with-exec uname -a | stdout</mistake>
<correct>container | from index.docker.io/alpine | with-exec -- uname -a | stdout</correct>
<mistake note="with-exec takes an array of arguments, NOT a shell command">container | from index.docker.io/alpine | with-exec apk update && apk add openssh</mistake>
container | from index.docker.io/alpine | with-exec apk update | with-exec apk add openssh
<mistake note="with-exec doesn't interpret bash-style file redirections. Instead use optional arguments to with-exec like --redirect-stdout">container | from index.docker.io/alpine | with-exec echo hello > out.txt | file out.txt</mistake>
container | from index.docker.io/alpine | with-exec --redirect-stdout=out.txt echo hello | file out.txt
directory | .doc
directory | with-new-file hello.txt 'Hello, world' | with-directory ./src $(directory with-new-file foo.txt 'foo') | glob '**'
directory | with-new-file hello.txt 'Hello, world' | with-directory ./src $(directory with-new-file foo.txt 'foo') | file src/foo.txt | contents
with-new-file hello.txt 'Hello, world' | with-directory ./src $(git https://github.com/goreleaser/goreleaser | head | tree)
.doc git
git https://github.com/dagger/dagger | .doc
git https://github.com/dagger/dagger | tags
git https://github.com/dagger/dagger | tag v0.15.1 | .doc
git https://github.com/dagger/dagger | tag v0.15.1 | commit
git https://github.com/dagger/dagger | tag v0.15.1 | tree | .doc
git https://github.com/dagger/dagger | tag v0.15.1 | tree | with-new-file foo/bar/extra.txt 'this is cool'
git https://github.com/dagger/dagger | tag v0.15.1 | tree | without-file README.md
container | from ubuntu | with-workdir /src | with-directory /src $(git https://github.com/dagger/dagger | head | tree)
</topic>

<topic "dagger modules">
.doc github.com/goreleaser/goreleaser
github.com/goreleaser/goreleaser | .doc
github.com/goreleaser/goreleaser | base | .doc
github.com/goreleaser/goreleaser | base | with-exec -- goreleaser --help | stdout
.doc github.com/dagger/dagger/modules/go
git https://github.com/golang/example | head | tree | entries
git https://github.com/golang/example | head | tree | directory ./hello | file go.mod
github.com/dagger/dagger/modules/go --version=1.23.0 $(git https://github.com/golang/example | head | tree | directory ./hello) | .doc
container | from alpine | with-file /bin/hello $(github.com/dagger/dagger/modules/go --version=1.23.0 $(git https://github.com/golang/example | head | tree | directory ./hello) | build | file bin/hello) | with-exec hello | stdout
.doc github.com/dagger/dagger/cmd/dagger
github.com/dagger/dagger/cmd/dagger | .doc
github.com/dagger/dagger/modules/wolfi | .doc
github.com/dagger/dagger/modules/wolfi | container | with-file /bin/dagger $(github.com/dagger/dagger/cmd/dagger | binary) | with-exec dagger version | stdout
</topic>

<topic "dockerfile compatibility">
directory | .doc docker-build
directory | with-new-file Dockerfile 'FROM ubuntu' | docker-build | .doc
directory | with-new-file Dockerfile 'FROM ubuntu' | docker-build | with-exec -- uname -a | stdout
</topic>

## Replays

### Replay 1: a beginner builds a container

Educational replay of a past shell session by a beginner, with the prompt: "build a container from alpine, install openssh and go, then copy the source code of github.com/dagger/dagger into a reasonable path, make that path the workdir"

<replay>
<cmd>
apk add openssh go
</cmd>
<success>false</success>
<result>

</result>
<error>
Error: function or module "apk" not found

</error>
<cmd>
git clone https://github.com/dagger/dagger.git /app
</cmd>
<success>false</success>
<result>

</result>
<error>
Error: could not parse arguments for function "git": accepts at most 1 positional argument(s), received 3

</error>
<cmd>
container | from alpine | with-exec apk add openssh go | git https://github.com/dagger/dagger | with-workdir /app
</cmd>
<success>false</success>
<result>

</result>
<error>
Error: no function "git" in type "Container"

</error>
<cmd>
container | from alpine | with-exec apk add openssh go | with-workdir /app | with-directory /app $(git https://github.com/dagger/dagger | head | tree)
</cmd>
<success>true</success>
<result>
{
    "defaultArgs": [
        "/bin/sh"
    ],
    "entrypoint": [],
    "mounts": [],
    "platform": "linux/arm64",
    "user": "",
    "workdir": "/app"
}

</result>
<error>

</error>
</replay>

### Replay 2: a beginner loads a remote module

Educational replay of a past shell session by a beginner, with the prompt: "Welcome to the cubzh team. Our dev environment is a dagger module. Learn how to use the shell. Then load github.com/cubzh/cubzh and pick a task and run it. if it fails, keep trying different tasks until you find one that succeeds. Then report back with a summary as table"

<replay>
<cmd>
github.com/cubzh/cubzh | .doc
</cmd>
<success>true</success>
<result>
[1m[0m[1mOBJECT[0m
  Cubzh

[1m[0m[1mAVAILABLE FUNCTIONS[0m
  test-core      Run core unit tests
  lint-core      Lint the core source code
  format-core    Format the core source code using clang tools
  lua-dev        Build a Lua dev container with modules source code mounted
  lint-modules   -

Use ".doc <function>" for more information on a function.


</result>
<error>

</error>
<cmd>
github.com/cubzh/cubzh | test-core
</cmd>
<success>false</success>
<result>

</result>
<error>
Error: input: cubzh.testCore process "./unit_tests" did not complete successfully: exit code: 1


</error>
<cmd>
github.com/cubzh/cubzh | lint-core
</cmd>
<success>true</success>
<result>

</result>
<error>

</error>
</replay>

### Replay 3: a beginner inspects a module then runs a build

Educational replay of a past shell session by a beginner, with the prompt: "load the module github.com/dagger/dagger and explore it thoroughly. Investigate available functions, their arguments, and do so recursively for custom objects returned by the top-level functions. Then build the CLI"

<replay>
<cmd>
github.com/dagger/dagger | .doc
</cmd>
<success>true</success>
<result>
[1m[0m[1mOBJECT[0m
  DaggerDev

  A dev environment for the DaggerDev Engine

[1m[0m[1mAVAILABLE FUNCTIONS[0m
  version               -
  tag                   -
  mod-codegen           When set, module codegen is automatically applied when
                        retrieving the Dagger source code
  mod-codegen-targets   -
  check                 Check that everything works. Use this as CI entrypoint.
  with-mod-codegen      Enable module auto-codegen when retrieving the dagger
                        source code
  cli                   Develop the Dagger CLI
  source                Return the Dagger source code
  go                    Dagger's Go toolchain
  engine                Develop the Dagger engine container
  docs                  Develop the Dagger documentation
  scripts               Run Dagger scripts
  test                  Run all tests
  generate              Run all code generation - SDKs, docs, etc
  sdk                   Develop Dagger SDKs
  release               Run Dagger release-related tasks
  dev                   Creates a dev container that has a running CLI
                        connected to a dagger engine
  dev-export            Creates an static dev build

Use ".doc <function>" for more information on a function.


</result>
<error>

</error>
<cmd>
github.com/dagger/dagger | source | .doc
</cmd>
<success>true</success>
<result>
[1m[0m[1mOBJECT[0m
  Directory

  A directory.

[1m[0m[1mAVAILABLE FUNCTIONS[0m
  as-module            Load the directory as a Dagger module
  diff                 Gets the difference between this directory and an
                       another directory.
  digest               Return the directory's digest. The format of the digest
                       is not guaranteed to be stable between releases of
                       Dagger. It is guaranteed to be stable between
                       invocations of the same Dagger engine.
  directory            Retrieves a directory at the given path.
  docker-build         Builds a new Docker container from this directory.
  entries              Returns a list of files and directories at the given
                       path.
  export               Writes the contents of the directory to a path on the
                       host.
  file                 Retrieves a file at the given path.
  glob                 Returns a list of files and directories that matche the
                       given pattern.
  sync                 Force evaluation in the engine.
  terminal             Opens an interactive terminal in new container with this
                       directory mounted inside.
  with-directory       Retrieves this directory plus a directory written at the
                       given path.
  with-file            Retrieves this directory plus the contents of the given
                       file copied to the given path.
  with-files           Retrieves this directory plus the contents of the given
                       files copied to the given path.
  with-new-directory   Retrieves this directory plus a new directory created at
                       the given path.
  with-new-file        Retrieves this directory plus a new file written at the
                       given path.
  with-timestamps      Retrieves this directory with all file/dir timestamps
                       set to the given time.
  without-directory    Retrieves this directory with the directory at the given
                       path removed.
  without-file         Retrieves this directory with the file at the given path
                       removed.
  without-files        Retrieves this directory with the files at the given
                       paths removed.

Use ".doc <function>" for more information on a function.


</result>
<error>

</error>
<cmd>
github.com/dagger/dagger | go | .doc
</cmd>
<success>true</success>
<result>
[1m[0m[1mOBJECT[0m
  DaggerDevGoToolchain

[1m[0m[1mAVAILABLE FUNCTIONS[0m
  env           -
  lint          -

Use ".doc <function>" for more information on a function.


</result>
<error>

</error>
<cmd>
github.com/dagger/dagger | sdk | .doc
</cmd>
<success>true</success>
<result>
[1m[0m[1mOBJECT[0m
  DaggerDevSdk

  A dev environment for the official Dagger SDKs

[1m[0m[1mAVAILABLE FUNCTIONS[0m
  go            Develop the Dagger Go SDK
  python        Develop the Dagger Python SDK
  typescript    Develop the Dagger Typescript SDK
  elixir        Develop the Dagger Elixir SDK (experimental)
  rust          Develop the Dagger Rust SDK (experimental)
  php           Develop the Dagger PHP SDK (experimental)
  java          Develop the Dagger Java SDK (experimental)
  all           -

Use ".doc <function>" for more information on a function.


</result>
<error>

</error>
<cmd>
github.com/dagger/dagger | engine | .doc
</cmd>
<success>true</success>
<result>
[1m[0m[1mOBJECT[0m
  DaggerDevDaggerEngine

[1m[0m[1mAVAILABLE FUNCTIONS[0m
  with-config      -
  with-arg         -
  with-race        -
  with-trace       -
  container        Build the engine container
  service          Create a test engine service
  lint             Lint the engine
  generate         Generate any engine-related files
  lint-generate    Lint any generated engine-related files
  publish          Publish all engine images to a registry
  scan             -
  load-to-docker   LoadToDocker loads the engine container into docker

Use ".doc <function>" for more information on a function.


</result>
<error>

</error>
<cmd>
github.com/dagger/dagger | dev | .doc
</cmd>
<success>true</success>
<result>
[1m[0m[1mOBJECT[0m
  Container

  An OCI-compatible container, also known as a Docker container.

[1m[0m[1mAVAILABLE FUNCTIONS[0m
  as-service                    Turn the container into a Service.
  as-tarball                    Returns a File representing the container
                                serialized to a tarball.
  build                         Initializes this container from a Dockerfile
                                build.
  default-args                  Retrieves default arguments for future
                                commands.
  directory                     Retrieves a directory at the given path.
  entrypoint                    Retrieves entrypoint to be prepended to the
                                arguments of all commands.
  env-variable                  Retrieves the value of the specified
                                environment variable.
  env-variables                 Retrieves the list of environment variables
                                passed to commands.
  exit-code                     The exit code of the last executed command.
  experimental-with-all-gp-us   EXPERIMENTAL API! Subject to change/removal at
                                any time.
  experimental-with-gpu         EXPERIMENTAL API! Subject to change/removal at
                                any time.
  export                        Writes the container as an OCI tarball to the
                                destination file path on the host.
  exposed-ports                 Retrieves the list of exposed ports.
  file                          Retrieves a file at the given path.
  from                          Initializes this container from a pulled base
                                image.
  image-ref                     The unique image reference which can only be
                                retrieved immediately after the
                                'Container.From' call.
  import                        Reads the container from an OCI tarball.
  label                         Retrieves the value of the specified label.
  labels                        Retrieves the list of labels passed to
                                container.
  mounts                        Retrieves the list of paths where a directory
                                is mounted.
  platform                      The platform this container executes and
                                publishes as.
  publish                       Publishes this container as a new image to the
                                specified address.
  rootfs                        Retrieves this container's root filesystem.
                                Mounts are not included.
  stderr                        The error stream of the last executed command.
  stdout                        The output stream of the last executed command.
  sync                          Forces evaluation of the pipeline in the
                                engine.
  terminal                      Opens an interactive terminal for this
                                container using its configured default terminal
                                command if not overridden by args (or sh as a
                                fallback default).
  up                            Starts a Service and creates a tunnel that
                                forwards traffic from the caller's network to
                                that service.
  user                          Retrieves the user to be set for all commands.
  with-annotation               Retrieves this container plus the given OCI
                                anotation.
  with-default-args             Configures default arguments for future
                                commands.
  with-default-terminal-cmd     Set the default command to invoke for the
                                container's terminal API.
  with-directory                Retrieves this container plus a directory
                                written at the given path.
  with-entrypoint               Retrieves this container but with a different
                                command entrypoint.
  with-env-variable             Retrieves this container plus the given
                                environment variable.
  with-exec                     Retrieves this container after executing the
                                specified command inside it.
  with-exposed-port             Expose a network port.
  with-file                     Retrieves this container plus the contents of
                                the given file copied to the given path.
  with-files                    Retrieves this container plus the contents of
                                the given files copied to the given path.
  with-label                    Retrieves this container plus the given label.
  with-mounted-cache            Retrieves this container plus a cache volume
                                mounted at the given path.
  with-mounted-directory        Retrieves this container plus a directory
                                mounted at the given path.
  with-mounted-file             Retrieves this container plus a file mounted at
                                the given path.
  with-mounted-secret           Retrieves this container plus a secret mounted
                                into a file at the given path.
  with-mounted-temp             Retrieves this container plus a temporary
                                directory mounted at the given path. Any writes
                                will be ephemeral to a single withExec call;
                                they will not be persisted to subsequent
                                withExecs.
  with-new-file                 Retrieves this container plus a new file
                                written at the given path.
  with-registry-auth            Retrieves this container with a registry
                                authentication for a given address.
  with-rootfs                   Retrieves the container with the given
                                directory mounted to /.
  with-secret-variable          Retrieves this container plus an env variable
                                containing the given secret.
  with-service-binding          Establish a runtime dependency on a service.
  with-unix-socket              Retrieves this container plus a socket
                                forwarded to the given Unix socket path.
  with-user                     Retrieves this container with a different
                                command user.
  with-workdir                  Retrieves this container with a different
                                working directory.
  without-annotation            Retrieves this container minus the given OCI
                                annotation.
  without-default-args          Retrieves this container with unset default
                                arguments for future commands.
  without-directory             Retrieves this container with the directory at
                                the given path removed.
  without-entrypoint            Retrieves this container with an unset command
                                entrypoint.
  without-env-variable          Retrieves this container minus the given
                                environment variable.
  without-exposed-port          Unexpose a previously exposed port.
  without-file                  Retrieves this container with the file at the
                                given path removed.
  without-files                 Retrieves this container with the files at the
                                given paths removed.
  without-label                 Retrieves this container minus the given
                                environment label.
  without-mount                 Retrieves this container after unmounting
                                everything at the given path.
  without-registry-auth         Retrieves this container without the registry
                                authentication of a given address.
  without-secret-variable       Retrieves this container minus the given
                                environment variable containing the secret.
  without-unix-socket           Retrieves this container with a previously
                                added Unix socket removed.
  without-user                  Retrieves this container with an unset command
                                user.
  without-workdir               Retrieves this container with an unset working
                                directory.
  workdir                       Retrieves the working directory for all
                                commands.

Use ".doc <function>" for more information on a function.


</result>
<error>

</error>
<cmd>
github.com/dagger/dagger | cli
</cmd>
<success>true</success>
<result>

</result>
<error>

</error>
</replay>
