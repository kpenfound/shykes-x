how to use modules to extend dagger shell with more functions and types

To extend your shell with new capabilities, use modules.

A module is just a source directory (local or remote via git) that dagger knows how to load
functions and types from.

To use a module, simply use its address as a command. For example:

<example>
# Assuming a module is at the local path ./foo
./foo | .doc
./foo | my-func MYARG --MYFLAG=VALUE
</example>

<example>
github.com/dagger/dagger/modules/go $(git https://github.com/dagger/dagger) | build ./cmd/dagger
</example>

<example>
github.com/shykes/hello | .doc
github.com/shykes/hello | hello --name=alice --greeting=hi
</example>

Modules can be composed in the same pipeline:

<example>
github.com/dagger/dagger/modules/wolfi | container | with-file $(github.com/dagger/dagger/cmd/dagger | binary) | with-exec dagger version | stdout
</example>

A module is loaded by a constructor function, which returns an object type.
That object can itself have more functions, etc.

To inspect the module's constructor, use .doc

<example>
.doc github.com/dagger/dagger/modules/go
</example>
